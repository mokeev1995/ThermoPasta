@model Portal.Models.ViewModels.DeviceCreate

@{
    ViewBag.Title = "Create";
}

<div class="panel panel-default">
	<div class="panel-heading"><h2>Add new device</h2></div>
	<div class="panel-body">
		@using (Html.BeginForm("Create", "Device", FormMethod.Post, new {@class = "form-horizontal"}))
		{
			@Html.AntiForgeryToken()

			<fieldset>
				@Html.ValidationSummary(true, "", new {@class = "text-danger"})
				<div class="form-group">
					@Html.LabelFor(model => model.Title, htmlAttributes: new {@class = "control-label col-md-2"})
					<div class="col-md-10">
						@Html.EditorFor(model => model.Title, new {htmlAttributes = new {@class = "form-control"}})
						@Html.ValidationMessageFor(model => model.Title, "", new {@class = "text-danger"})
					</div>
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.ProfileId, new {@class = "col-md-2 control-label"})
					<div class="col-md-10">
						@Html.DropDownListFor(model => model.ProfileId, ViewBag.Profiles as SelectList, new {@class = "form-control"})
					</div>
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.Period, new {@class = "col-md-2 control-label"})
					<div class="col-md-10">
						@Html.DropDownListFor(model => model.Period, new SelectList(ViewBag.Periods, ViewBag.Period), new {@class = "form-control"})
					</div>
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.Code, htmlAttributes: new {@class = "control-label col-md-2"})
					<div class="col-md-10">
						@Html.EditorFor(model => model.Code, new {htmlAttributes = new {@class = "form-control"}})
						@Html.ValidationMessageFor(model => model.Code, "", new {@class = "text-danger"})
					</div>
				</div>

				<div class="form-group">
					<div class="col-md-offset-2 col-md-10">
						<a href="@Url.Action("Index")" class="btn btn-default">&lt; Back</a>
						<input type="submit" value="Add" class="btn btn-material-deep-orange-500"/>
					</div>
				</div>
			</fieldset>
		}

	</div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
